name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 6 * * *"

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_VERBOSE: true
  CARGO_TERM_COLOR: always

jobs:
  cargo-test:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        toolchain: ["1.46.0", stable, beta]
        profile: ['', --release]
        features: ['', '--all-features']
        exclude:
          # capture-stream is not supported on Windows or compiler versions too old for Tokio.
          - os: windows-latest
            features: '--all-features'
          - toolchain: "1.46.0"
            features: '--all-features'
        include:
          # nightly check is performed on ubuntu only.
          - os: ubuntu-latest
            toolchain: nightly
            profile: ''
            features: --all-features
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Install libpcap (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libpcap-dev
      - name: Install libpcap (macos)
        if: matrix.os == 'macos-latest'
        run: brew install libpcap
      - name: Install WinPcap (windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/patmarion/winpcap.git C:/winpcap
          echo "LIB=C:/winpcap/Lib/x64" >> $env:GITHUB_ENV
          cp C:/winpcap/Lib/x64/wpcap.dll ${env:SystemRoot}/System32/wpcap.dll
          regsvr32 ${env:SystemRoot}/System32/wpcap.dll

          git clone https://github.com/3gstudent/Winpcap_Install.git C:/npf
          cp C:/npf/npf_x64.sys ${env:SystemRoot}/System32/drivers/npf.sys
          cp C:/npf/wpcap.dll ${env:SystemRoot}/System32/wpcap.dll
          echo ${env:SystemRoot}
          sc create npf binPath= system32\drivers\npf.sys type= kernel start= demand error= normal tag= no DisplayName= "NetGroup Packet Filter Driver"
          sc start npf
      - name: Select rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy, rustfmt
          override: true
      - name: cargo build
        run: cargo build ${{ matrix.profile }} ${{ matrix.features }}
      - name: tmp
        if: matrix.os == 'windows-latest'
        run: |
          echo ${env:SystemRoot}
          echo ${env:Path}
          ls C:\Windows\System32\wpcap.dll
      - name: cargo test
        run: cargo test ${{ matrix.profile }} ${{ matrix.features }}
      - name: cargo clippy
        if: matrix.toolchain == 'stable'
        run: cargo clippy ${{ matrix.profile }} ${{ matrix.features }} -- -D warnings
      - name: cargo doc
        run: env DOCS_RS=true cargo doc ${{ matrix.profile }} ${{ matrix.features }} --no-deps
      - name: cargo fmt
        if: matrix.toolchain == 'stable'
        run: cargo fmt -- --check
